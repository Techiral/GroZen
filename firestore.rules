
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Define your Admin UID here. Replace with your actual Admin UID if different.
    // Ensure 'QNSRsQsMqRRuS4288vtlBYT1a7E2' IS YOUR CORRECT ADMIN UID if you are using one.
    function isAdmin() {
      return request.auth != null && request.auth.uid == 'QNSRsQsMqRRuS4288vtlBYT1a7E2';
    }

    // --- Usernames Collection ---
    // Allows checking username availability and claiming usernames during signup.
    match /usernames/{username} {
      // Allow anyone to check if a username document exists (for availability check).
      allow get: if true; 

      // Allow an authenticated user to create their username document if:
      // 1. They are logged in (request.auth != null).
      // 2. The 'userId' field in the new document matches their own UID.
      // An admin can also create these if needed.
      allow create: if request.auth != null && 
                       (request.resource.data.userId == request.auth.uid || isAdmin());

      // Only an admin should update or delete username documents directly.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Users Collection ---
    // Stores main user profile data, onboarding info, wellness plans, etc.
    match /users/{userIdFromPath} { // Renamed wildcard for clarity
      // LIST: Allow any authenticated user to attempt to list/query users.
      // The query itself will be further constrained by the 'read' permission on individual documents.
      allow list: if request.auth != null;

      // READ (GET): 
      // - An admin can read any user's document.
      // - Any authenticated user can read any user document. This is necessary for the
      //   leaderboard query to succeed when it retrieves multiple user documents.
      //   Ensure that sensitive data within user documents is either not present or
      //   you implement more granular field-level security if needed for other contexts.
      //   For the leaderboard, we only fetch displayName, avatarUrl, and daysCompleted.
      allow read: if request.auth != null;
      
      // CREATE: Allow user to create their own document, or admin to create.
      allow create: if request.auth != null && (request.auth.uid == userIdFromPath || isAdmin());
      // UPDATE: Allow user to update their own document, or admin to update.
      allow update: if request.auth != null && (request.auth.uid == userIdFromPath || isAdmin());
      // DELETE: Only an admin should be able to delete a user's main document.
      allow delete: if isAdmin();

      // --- MoodLogs Subcollection (nested under each user) ---
      match /moodLogs/{logId} {
        // An admin can read/write/delete any user's mood logs.
        // A regular authenticated user can only read/write/delete their own mood logs.
        // userIdFromPath here refers to the {userIdFromPath} from the parent users collection.
        allow read, write, delete: if request.auth != null && (request.auth.uid == userIdFromPath || isAdmin());
      }
    }

    // --- Early Access Signups Collection ---
    // For emails submitted through the exit-intent popup.
    match /earlyAccessSignups/{docId} {
      // Allow anyone to create a document (i.e., submit their email).
      allow create: if true;

      // Only an admin can read, update, or delete these signups.
      allow read, update, delete: if isAdmin();
    }
  }
}
